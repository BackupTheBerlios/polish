/*
 * Created on 09-Jun-2005 at 13:20:43.
 * 
 * Copyright (c) 2005 Robert Virkus / Enough Software
 *
 * This file is part of J2ME Polish.
 *
 * J2ME Polish is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * J2ME Polish is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with J2ME Polish; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * Commercial licenses are also available, please
 * refer to the accompanying LICENSE.txt or visit
 * http://www.j2mepolish.org for details.
 */
//Generated by J2ME Polish at Thu Jun 09 13:20:15 CEST 2005
package de.enough.polish.runtime;

import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.*;

import javax.imageio.ImageIO;
import javax.microedition.lcdui.Canvas;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;

/**
 * <p>A control for a specific device/device class.</p>
 *
 * <p>Copyright Enough Software 2005</p>
 * <pre>
 * history
 *        09-Jun-2005 - rob creation
 * </pre>
 * @author Robert Virkus, j2mepolish@enough.de
 */
public abstract class Control 
extends JLabel
implements MouseListener
{
	
	private final static int LEFT_SOFT_BUTTON = 0;
	private final static int RIGHT_SOFT_BUTTON = 1;
	private final static int MODE_CHANGE_BUTTON = 2;
	private final static int CLEAR_BUTTON = 3;
	private final static int FIRE_BUTTON = 4;
	private final static int UP_BUTTON = 5;
	private final static int LEFT_BUTTON = 6;
	private final static int DOWN_BUTTON = 7;
	private final static int RIGHT_BUTTON = 8;
	private final static int QUIT_BUTTON = 9;
	
	public Rectangle screenPos;
	public int screenX;
	public int screenY;
	public BufferedImage skin;
	public int controlWidth;
	public int controlHeight;
	private Simulation simulation;

	public Control( Simulation simulation )
	{
		super();
		this.simulation = simulation;
		addMouseListener( this );
	} // end of constructor
	
	public abstract int getButton( int x, int y );
	
	/**
	 * @param x the x position
	 * @param y the y position
	 * @param positions the x,y, width, and height positions of each button
	 * @return the array index of the selected area
	 */
	protected  int getButton(int x, int y, Rectangle[] positions ) {
		for (int i = 0; i < positions.length; i++) {
			Rectangle rectangle = positions[i];
			if (x < rectangle.x || y < rectangle.y || x > rectangle.x + rectangle.width || y > rectangle.y + rectangle.height ) {
				continue;
			}
			return i;
		}
		return -1;
	}


	public void triggerButton( int x, int y) {
		int button = getButton( x, y ); 
		switch (button) {
			case LEFT_SOFT_BUTTON: 
				this.simulation.simulateLeftSoftKeyPressedEvent();
				break;
			case RIGHT_SOFT_BUTTON: 
				this.simulation.simulateRightSoftKeyPressedEvent();
				break;
			case MODE_CHANGE_BUTTON: 
				this.simulation.simulateChangeInputModeKeyPressedEvent();
				break;
			case CLEAR_BUTTON: 
				this.simulation.simulateClearKeyPressedEvent();
				break;
			case FIRE_BUTTON: 
				this.simulation.simulateGameActionEvent( Canvas.FIRE );
				break;
			case UP_BUTTON: 
				this.simulation.simulateGameActionEvent( Canvas.UP );
				break;
			case LEFT_BUTTON: 
				this.simulation.simulateGameActionEvent( Canvas.LEFT );
				break;
			case DOWN_BUTTON: 
				this.simulation.simulateGameActionEvent( Canvas.DOWN );
				break;
			case RIGHT_BUTTON: 
				this.simulation.simulateGameActionEvent( Canvas.RIGHT );
				break;
			default:
				System.out.println("Unknown phone button pressed: " + button );
		}
	}
	
	/* (non-Javadoc)
	 * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
	 */
	public void mouseClicked(MouseEvent e) {
		triggerButton( e.getX(), e.getY() );
	}

	/* (non-Javadoc)
	 * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
	 */
	public void mouseEntered(MouseEvent e) {
		// TODO enough implement mouseEntered
		
	}

	/* (non-Javadoc)
	 * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
	 */
	public void mouseExited(MouseEvent e) {
		// TODO enough implement mouseExited
		
	}

	/* (non-Javadoc)
	 * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
	 */
	public void mousePressed(MouseEvent e) {
		// TODO enough implement mousePressed
		
	}

	/* (non-Javadoc)
	 * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
	 */
	public void mouseReleased(MouseEvent e) {
		// TODO enough implement mouseReleased
		
	}




} // end of class
