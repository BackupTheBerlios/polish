/*
 * Created on 09-Jun-2005 at 13:20:43.
 * 
 * Copyright (c) 2005 Robert Virkus / Enough Software
 *
 * This file is part of J2ME Polish.
 *
 * J2ME Polish is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * J2ME Polish is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with J2ME Polish; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * Commercial licenses are also available, please
 * refer to the accompanying LICENSE.txt or visit
 * http://www.j2mepolish.org for details.
 */
//Generated by J2ME Polish at Thu Jun 09 13:20:15 CEST 2005
package de.enough.polish.runtime;

import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.*;

import javax.imageio.ImageIO;
import javax.microedition.lcdui.Canvas;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;

/**
 * <p>A control for a specific device/device class.</p>
 *
 * <p>Copyright Enough Software 2005</p>
 * <pre>
 * history
 *        09-Jun-2005 - rob creation
 * </pre>
 * @author Robert Virkus, j2mepolish@enough.de
 */
public final class ConfiguredControl 
extends Control
{
	
	
	public final PositionDimension up;
	public final PositionDimension down;
	public final PositionDimension left;
	public final PositionDimension right;
	public final PositionDimension fire;
	public final PositionDimension leftSoftButton;
	public final PositionDimension rightSoftButton;
	public final PositionDimension clearButton;
	public final PositionDimension changeInputModeButton;
	public final PositionDimension quitButton;
	public final PositionDimension backButton;
	private PositionDimension[] allButtons;

	public ConfiguredControl( Simulation simulation, String dataUrl )
	throws IOException
	{
		super( simulation );
		InputStream plainIn = getClass().getResourceAsStream( dataUrl );
		if (plainIn == null) {
			throw new IllegalArgumentException("Unable to open resource [" + dataUrl + "]: resource not found: does it start with \"/\"?");
		}
		DataInputStream in = new DataInputStream( plainIn );
		try {
			this.screenPos = new PositionDimension( in );
			this.screenX = this.screenPos.x;
			this.screenY = this.screenPos.y;
			this.up = new PositionDimension( in );
			this.down = new PositionDimension( in );
			this.left = new PositionDimension( in );
			this.right = new PositionDimension( in );
			this.fire = new PositionDimension( in );
			this.leftSoftButton = new PositionDimension( in );
			this.rightSoftButton = new PositionDimension( in );
			this.clearButton = new PositionDimension( in );
			this.changeInputModeButton = new PositionDimension( in );
			this.quitButton = new PositionDimension( in );
			this.backButton = new PositionDimension( in );
			this.skin = ImageIO.read(in);
			this.controlWidth = this.skin.getWidth();
			this.controlHeight = this.skin.getHeight();
			this.allButtons = new PositionDimension[]{ this.leftSoftButton, this.rightSoftButton, this.changeInputModeButton,
					this.clearButton, this.fire, this.up, this.left, this.down, this.right, this.quitButton };
			setIcon( new ImageIcon( this.skin ) );
			//setBounds( 0, 0, this.controlWidth, this.controlHeight );
			/*
			//#ifdef polish.midp2
				this.skin = javax.microedition.lcdui.Image.createImage( in );
			//#else
				java.io.ByteArrayOutputStream skinOut = new java.io.ByteArrayOutputStream();
				byte[] skinBuffer = new byte[ 3*1024 ];
				int skinRead;
				while ( (skinRead = in.read( skinBuffer, 0, skinBuffer.length) ) != -1 ) {
					skinOut.write( skinBuffer, 0, skinRead );
				}
				skinBuffer = skinOut.toByteArray();
				this.skin = javax.microedition.lcdui.Image.createImage( skinBuffer, 0, skinBuffer.length );
			//#endif
			 * 
			 */
		} catch (IOException e) {
			throw e;
		} catch (Exception e) {
			//#debug error
			System.out.println("Unable to load data" + e);
			throw new IOException( e.toString() );
		} finally {
			try {
				in.close();
			} catch (Exception e) {
				//#debug error
				System.out.println("Unable to close input stream" + e);
			}
		}
	} // end of constructor
	
	public int getButton( int x, int y ) {
		return getButton( x, y, this.allButtons );
	}


public class Position extends Point {
	public Position( DataInputStream in )
	throws IOException
	{
		this.x = in.readInt();
		this.y = in.readInt();
	} // end of constructor 
} // end of inner class

public class PositionDimension extends Rectangle {
	public PositionDimension( DataInputStream in )
	throws IOException
	{
		this.x = in.readUnsignedShort();
		this.y = in.readUnsignedShort();
		this.width = in.readUnsignedShort();
		this.height = in.readUnsignedShort();
	} // end of constructor 
} // end of inner class




} // end of class
