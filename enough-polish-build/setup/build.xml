<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish-target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-example" 
	default="j2mepolish">
	
<!-- The wtk.home property should point to the directory      -->
<!-- containing the Wireless Toolkit.                         -->
<property name="wtk.home" value="%{WTK_HOME}" />
<!-- The polish.home property should point to the directory   -->
<!-- containing the J2ME Polish installation.                 -->
<property name="polish.home" value="%{INSTALL_PATH}" />
	
<!-- The siemens.home, nokia.home and motorola.home-          -->
<!-- properties can be necessary when their emulators         -->
<!-- should be started.                                       -->
<!-- The directory which contains the Siemens-SMTK
	<property name="siemens.home" value="C:\siemens" />
-->
<!-- The directory which contains the Nokia-emulators
	<property name="nokia.home" value="C:\Nokia" />
-->
<!-- The path to the Sony-Ericsson SDK
	<property name="sony-ericsson.home" value="C:\SonyEricsson\J2ME_SDK" />
-->
<!-- The directory which contains the Motorola-emulators
	<property name="motorola.home" value="C:\Program Files\Motorola\SDK v4.3 for J2ME" />
-->
	
<!-- Definition of the J2ME Polish task:                      -->
<taskdef name="j2mepolish" 
	classname="de.enough.polish.ant.PolishTask" 
	classpath="${polish.home}/import/enough-j2mepolish-build.jar:${polish.home}/import/jdom.jar:${polish.home}/import/proguard.jar:${polish.home}/yguard-lib.jar:${wtk.home}/wtklib/kenv.zip"/>

	
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->

<target name="setdeploy" 
	description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
	>
	<property name="deploy-url" value="http://www.company.com/download/" />
</target>
	
<target name="test" 
	description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
	>
	<property name="test" value="true" />
	<property name="dir.work" value="build/test" />
</target>
		
<target name="init">
  	<property name="test" value="false" />
	<property name="dir.work" value="build/real" />
	<property name="deploy-url" value="" />
</target>
 
<!-- In this target the J2ME Polish task is used.             -->
<!-- It has 3 sections:                                       -->
<!--    1. The info-section defines some general information  -->
<!--    2. The deviceRequirements-section chooses the devices -->
<!--       for which the application is optimized.            -->
<!--    3. The build-section controls the actual build        -->
<!--       process.                                           -->	
<target name="j2mepolish" 
		depends="init"
		description="This is the controller for the J2ME build process." 
		>
	<j2mepolish>
	    <!-- general settings, these settings basically form the JAD-attributes. -->
	    <!-- Have a look at the <jad>-section for setting specialised attributes.
	         You can also define localized attributes in the resources/messages.txt files -->
		<info
			license="%{J2ME_POLISH_LICENSE}"
			name="J2ME Polish"
			version="1.3.4"
			description="A sample project"
			vendorName="Enough Software"
			infoUrl="http://www.j2mepolish.org"
			icon="dot.png"
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-example.jar" 
			jarUrl="${deploy-url}${polish.jarName}"
			copyright="Copyright 2004 Enough Software. All rights reserved."
			deleteConfirm="Do you really want to kill me?" 
		/>
		<!-- selection of supported devices -->
		<!-- In the test mode the application is build only for the  -->
		<!-- Generic/midp1 phone, but when the test-property is set to false, -->
		<!-- the second deviceRequirements will be used instead. -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="Generic/midp1" />
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="Sony-Ericsson/P900, Nokia/Series60, Nokia/Series60Midp2, Generic/midp2, Generic/midp1" />
			<!-- on could use other devices for real builds, e.g. :
			<or>
				<and>
					<requirement name="JavaPackage" value="nokia-ui" />
					<requirement name="BitsPerPixel" value="16+" />
				</and>
			</or>
			 -->
		</deviceRequirements>
	    <!-- build settings -->
		<!-- 
		 -->
		<build
			symbols="ExampleSymbol, AnotherExample"
			fullscreen="menu"
			usePolishGui="true"
			workDir="${dir.work}"
		>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.example.MenuMidlet" name="Example" />
			<!-- project-wide variables - used for preprocessing.  -->
			<!-- You can set localized variables in the resources/messages.txt files as well.  -->
			<variables includeAntProperties="true" >
				<!-- example variables:
				In your Java-code you can use the following snipet to use this variable:
				//#= private static final String UPDATE_URL = "${ update-url }";
				You can change the title of the sample application with the "title"-var.
				-->
				<variable name="update-url" value="http://www.enough.de/update" />
				<variable name="title" value="J2ME Polish" />
			</variables>
			<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<!-- you can add resources based on complex criterias: 
				<fileset 
					dir="resources/multimedia" 
					includes="*.wav" 
					if="polish.audio.wav" 
				/>
				<fileset 
					dir="resources/multimedia" 
					includes="*.mid" 
					if="polish.audio.midi and not polish.audio.wav" 
				/>
				-->
				<!-- add the localization element for created localized
				     versions of your application: -->
				<localization locales="de_DE, en_US" unless="test" />
				<localization locales="en_US" if="test" />
			</resources>
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" useDefaultPackage="true" unless="test" >
				<!--
				You can set additional parameters here, e.g.:
				<parameter name="optimize" value="false" />
				-->
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" showLogOnError="true" verbose="true" level="error">
				<filter pattern="de.enough.polish.example.*" level="debug" />
				<filter pattern="de.enough.polish.ui.*" level="warn" />
			</debug>
			<!-- user defined JAD attributes can also be used: -->
			<jad>
				<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
			</jad>	
			<!-- this is an example for signing MIDlets with J2ME Polish. -->
			<!--
			<java jar="${wtk.home}/bin/JadTool.jar" 
			    fork="true" 
			    failonerror="true" 
			    if="polish.midp2" 
				unless="test"
				message="Adding signature for device ${polish.identifier}"
				>
				<arg line="-addjarsig"/>
				<arg line="-keypass ${password}"/>
				<arg line="-alias SignMIDlet"/>
				<arg line="-keystore midlets.ks"/>
				<arg line="-inputjad dist/${polish.jadName}"/>
				<arg line="-outputjad dist/${polish.jadName}"/>
				<arg line="-jarfile dist/${polish.jarName}"/>
			</java>	
			<java jar="${wtk.home}/bin/JadTool.jar" 
				fork="true" 
				failonerror="true" 
				if="polish.midp2" 
				unless="test"
				message="Adding certificate for device ${polish.identifier}"
				>
				<arg line="-addcert"/>
				<arg line="-alias SignMIDlet"/>
				<arg line="-keystore midlets.ks"/>
				<arg line="-inputjad dist/${polish.jadName}"/>
				<arg line="-inputjad dist/${polish.jadName}"/>
				<arg line="-outputjad dist/${polish.jadName}"/>
			</java>	
			-->
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			trace="class"
			securityDomain="trusted"
			enableProfiler="true"
			enableMemoryMonitor="true"
			enableNetworkMonitor="true"
			if="test"
			>
			<!--
			<parameter name="-Xjam" value="transient=http://localhost:8080/${polish.jadName}" />
			-->
		</emulator>
	
	</j2mepolish>
</target>


<target name="clean" 
  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
	<delete dir="build" />
	<delete dir="dist" />
</target>

</project>
