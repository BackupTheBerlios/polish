<!-- 
	bugs.xml contains the definitions of bugs which are used in devices.xml. 

    Copyright (c) 2004, 2005 Robert Virkus / Enough Software

    This file is part of J2ME Polish.

    J2ME Polish is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    J2ME Polish is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foobar; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Commercial licenses are also available, please
    refer to the accompanying LICENSE.txt or visit
    http://www.j2mepolish.org for details.

-->
<bugs>
	<bug>
		<name>drawRgbOrigin</name>
		<description>The Graphics.drawRGB(..) method does not use a translated origin, 
		 but starts always at the top-left 0,0 origin.
		</description>
		<area>ui</area>
		<solution>
		Use the top-left 0,0 origin for devices with this bug:\n
		//#ifdef polish.Bugs.drawRgbOrigin\n
			x += g.getTranslateX();\n
			y += g.getTranslateY();\n
		//#endif\n
		g.drawRGB( rgbData, offset, scanlength, x, y, width, height, processAlpha);
		</solution>
	</bug>
	<bug>
		<name>ImageIOStreamAutoClose</name>
		<description>The Image.createImage( InputStream in ) should not close
		the given input stream according to the specification. Devices with this
		bug close the input stream.
		</description>
		<area>io</area>
		<solution>Move any image which should be loaded from an input stream to 
		the last position in the corresponding stream.
		</solution>
	</bug>
	<bug>
		<name>fullScreenInPaint</name>
		<description>Calling the Canvas.setFullScreenMode(boolean) method results
		in an error, unless it is called in the paint()-method.
		</description>
		<area>ui</area>
		<solution>Track the state of the fullscreen mode and set it in the paint method.
		</solution>
	</bug>
	<bug>
		<name>fullScreenInShowNotify</name>
		<description>Calling the Canvas.setFullScreenMode(boolean) method results
		in an error, unless it is called in the showNotify()-method.
		</description>
		<area>ui</area>
		<solution>Set it the fullscreen mode in the showNotify() method.
		</solution>
	</bug>
	<bug>
		<name>NoSpriteRotation</name>
		<description>The MIDP/2.0 Sprite Rotation does not work on this device.
		</description>
		<area>game, ui</area>
	</bug>
	<bug>
		<name>DisplayGetColor</name>
		<description>The MIDP/2.0 Display-method getColor( int specification ) does not work
		on this device. This method is often used for CustomItems.
		</description>
		<area>ui</area>
		<solution>Define and use your own colors for this device.
		A possible (but untested) solution might be to call getColor() after the first
		screen has been set, so that the UI graphics system has the chance to initialize.
		</solution>
	</bug>
	<bug>
		<name>needsGCinPaint</name>
		<description>When you encounter a DISCONTINUED error on such a device,
		you might need to call the garbage collection in each paint(Graphics g)-call.
		</description>
		<area>ui</area>
		<solution>Call the Runtime.getRuntime().gc()-method in your paint(Graphics g)-methods.</solution>
	</bug>
	<bug>
		<name>inaccessibleFirstRow</name>
		<area>ui</area>
		<description>The first top row of pixels is not accsessible for developers. Painting the whole screen with a fullsize image will result in the last row of pixels out of screen. </description>
		<solution></solution>
	</bug>
	<bug>
		<name>umlautsInSmallFont</name>
		<area>ui</area>
		<description>Some special characters are not displayed correctly in small fonts.</description>
		<solution>Using medium, large or bitmap fonts.</solution>
	</bug>
	<bug>
		<name>dateFieldAcceptsNoNullDate</name>
		<area>ui</area>
		<description>The javax.microedition.lcdui.DateField must not get a null Date, otherwise it cannot be changed by the user.</description>
		<solution>Provide a new Date instance with the setDate( java.util.Date ) after creating the DateField or use the J2ME Polish GUI.</solution>
	</bug>
	<bug>
		<name>dateFieldBroken</name>
		<area>ui</area>
		<description>The javax.microedition.lcdui.DateField always returns the initial value, even when the value has been changed by the user.</description>
		<solution>Use the J2ME Polish GUI (which assumes a &quot;true&quot; polish.DateField.directInputMode when this error is present from J2ME Polish 1.3 onwards).</solution>
	</bug>
	<bug>
		<name>layerManagerSetViewWindow</name>
		<area>game</area>
		<description>The setViewWindow( viewX, viewY, viewWidth, viewHeight ) method moves all layers in the manager instead of setting the view window.</description>
		<solution>Don't set the view window's viewX and viewY coordinates  when this bug is present and adjust the paint-call of the layer-manager: 
		 instead of calling layerManager.paint( g, x, y ) call layerManager.paint( g, x - viewX, y - viewY ).
		</solution>
	</bug>

	<bug>
		<name>needsNokiaUiForSystemAlerts</name>
		<area>ui</area>
		<description>When using the MIDP/2.0 based fullscreen mode devices with this error do not show system screens properly. 
		 System screens are usually shown automatically when security sensitive operations are undertaken,
		 e.g. sending a short message.
		</description>
		<solution>Use the com.nokia.mid.ui.FullCanvas instead for having a fullscreen mode. The J2ME Polish GUI does this automatically when this error is present.</solution>
	</bug>

	<bug>
		<name>stringWidthLineBreak</name>
		<area>ui</area>
		<description>The Font.stringWidth( String ) method disregards any characters after a line-break character (\n).</description>
		<solution>When calculating the complete width of a string with line-breaks, you need to split the string at the line-breaks first and then add up the widths of the single parts.</solution>
	</bug>
	
	<bug>
		<name>ConnectorNokiaComm</name>
		<area>io</area>
		<description>Infrared ports cannot be opend with Connector.open(&quot;comm:IR0&quot;).</description>
		<solution>Use instead the &quot;nokiacomm&quot; connector: Connector.open(&quot;nokiacomm:IR0&quot;).</solution>
	</bug>
	
	<bug>
		<name>PlatformRequestHttpLaunchRequiresExit</name>
		<area>io</area>
		<description>Normally a platformRequest( &quot;http://www.xxx.com&quot;) should launch the browser immediately, 
		  with either leaving the application running or destroying the application first. On the affected devices
		  you need to exit the application manually, however. Initialising voice calls via platformRequest() is working
		  however with putting the application to the background.
		</description>
		<solution>Exit the application manually after issuing a HTTP platform request when this bug is present.</solution>
	</bug>

	<bug>
		<name>ExitCommandAlwaysPresent</name>
		<area>ui</area>
		<description>On Series 60 phones there is always an &quot;Exit&quot; command present for closing the application.</description>
		<solution>Use the J2ME Polish GUI instead.</solution>
	</bug>

	<bug>
		<name>PlatformRequestRequiresQuit</name>
		<area>io</area>
		<description>When a non-voice-call platform request is issued, the application needs to be exited manually before the request is launched.</description>
		<solution>Exit the application when this bug is present.</solution>
	</bug>


	<bug>
		<name>GaugeNoProgessIndicatorOnAlerts</name>
		<area>ui</area>
		<description>When you update a Gauge item within an Alert this update is not shown. Also the title of the Alert is not shown.</description>
		<solution>Do not use a Gauge as a progress indicator in Alerts when this bug is present.</solution>
	</bug>
	
	<bug>
		<name>BluetoothRfcommInputStream</name>
		<area>io</area>
		<description>When an RFCOMM-protocol InputStream is read over a bluetooth connection on the affected devices,
			an IOException is thrown when the the other end has closed the stream while it is still being read.
			Also the application crashes when the input stream uses an array bigger than 512 bytes.
		</description>
		<solution>Make sure that the other end does not close the connection before the application has finished
			reading the input stream. Also do not use a larger array than 512 for the input stream.
		</solution>
	</bug>
	
	<bug>
		<name>OverrideGetWidthGetHeightInFullCanvas</name>
		<area>ui</area>
		<description>When you extend the com.nokia.mid.ui.FullCanvas class you can experience strange behaviors and crashes 
			when you override either the getWidth() or the getHeight() method. Nokia canvas classes don't seem to
			like that in general.
		</description>
		<solution>Use other method names if you need to provide your own height and width.
		</solution>
	</bug>

	<bug>
		<name>drawStringOver200Chars</name>
		<area>ui</area>
		<description>The Graphics.drawString() and Graphics.drawSubstring() methods crash when the given String contains 
			more than 200 characters.
		</description>
		<solution>Use Graphics.drawChars() instead.</solution>
	</bug>

	<bug>
		<name>getResourceAsStreamMemoryLeak</name>
		<area>io, ui</area>
		<description>When you call getResourceAsStream() memory will be leaked in the same size as the resource.
		     This is also the case when it is used indirectly, e.g. in Image.createImage().
		</description>
		<solution>
			Don't load the same resource more than once and hope it all fits into the memory.
		</solution>
	</bug>

	<!--
	<bug>
		<name></name>
		<area></area>
		<description></description>
		<solution></solution>
	</bug>
	-->
</bugs>