<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="XML-RPC Sample Client" 
	default="j2mepolish">
	
<property file="${user.name}.properties" />
<property file="midlet.properties" />
	
<!-- The polish.home property should point to the directory   -->
<!-- containing the J2ME Polish installation.                 -->
<property name="polish.home" value="C:/Programme/J2ME-Polish-2.1.0-Preview" />
<property file="${polish.home}/global.properties" />

<!-- The wtk.home property should point to the directory      -->
<!-- containing the Wireless Toolkit.                         -->
<property name="wtk.home" value="C:/Programme/Java/WTK2.5.2_01" />
<!-- The device to build for (if not defined in ${user.name}.properties) -->
<property name="device" value="Generic/AnyPhone" />
<!-- The directory to deploy (copy the war file) server to -->
<property name="deploy.dir" value="C:/Programme/tomcat-5.5.27/webapps" />	
<!-- the name of the build and the dist directory -->
<property name="distdir" value="dist" />
<property name="builddir" value="build" />
<!-- name of the server war file -->
<property name="warfilename" value="xmlrpcserver.war" />	

	
<!-- Definition of the J2ME Polish task:                      -->
<taskdef name="j2mepolish" 
	classname="de.enough.polish.ant.PolishTask" 
	classpath="${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar"/>
	
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->
<target name="setdeploy" 
	description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
	>
	<property name="deploy-url" value="http://www.company.com/download/" />
</target>
	
<target name="test" 
	description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
	>
	<property name="test" value="true" />
	<property name="dir.work" value="build/test" />
</target>
		
<target name="init">
  	<property name="test" value="false" />
	<property name="dir.work" value="build/real" />
	<property name="deploy-url" value="" />
</target>
 
<!-- In this target the J2ME Polish task is used.             -->
<!-- It has 3 sections:                                       -->
<!--    1. The info-section defines some general information  -->
<!--    2. The deviceRequirements-section chooses the devices -->
<!--       for which the application is optimized.            -->
<!--    3. The build-section controls the actual build        -->
<!--       process.                                           -->	
<target name="j2mepolish" 
		depends="init"
		description="This is the controller for the J2ME build process." 
		>
	<j2mepolish>
	    <!-- general settings, these settings basically form the JAD-attributes. -->
	    <!-- Have a look at the <jad>-section for setting specialised attributes.
	         You can also define localized attributes in the resources/messages.txt files -->
		<info
			name="XML-RPC Sample Client"
			version="1.0.0"
			description="XML-RPC Sample Client"
			vendorName="Enough Software"
			infoUrl="http://www.j2mepolish.org"
			icon=""
			jarName="xmlrpcsampleclient.jar" 
			jarUrl="${polish.jarName}"
			copyright="Copyright 2009 Enough Software. All rights reserved."
		/>
		
		<!-- selection of supported devices -->
		<!-- In the test mode the application is build only for the  -->
		<!-- Generic/midp1 phone, but when the test-property is set to false, -->
		<!-- the second deviceRequirements will be used instead. -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements if="!test and device:defined">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test">
			<or>
				<requirement name="Identifier" value="Generic/AnyPhone" />
			</or>
		</deviceRequirements>
		
	    <!-- build settings -->
		<build
			symbols="ExampleSymbol, AnotherExample"
			fullscreen="menu"
			usePolishGui="true"
			workDir="${dir.work}"
		>
			<sources>
				<source dir="source/src" />
				<source dir="source/common" />
			</sources>
			<libraries>
			</libraries>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.rmi.XMLRPCSampleMidlet" name="XMLRPCSampleMidlet"/>
			
			<!-- project-wide variables - used for preprocessing.  -->
			<!-- You can set localized variables in the resources/messages.txt files as well.  -->
			<variables includeAntProperties="true" >
				<variable name="polish.MenuBar.useExtendedMenuBar" value="false" />
				<variable name="polish.TabbedForm.allowTabSelection" value="false" />
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.TextField.supportSymbolsEntry" value="false" />
				<variable name="polish.useScrollBar" value="true" />
				<variable name="polish.log.file.fileName" value="bankinglog.txt" />
				<variable name="polish.log.file.useUnqiueName" value="true" />
				
				<variable name="polish.rmi.xmlrpc" value="true" />
				<variable name="polish.rmi.redirects" value="false" />
			</variables>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" useDefaultPackage="false" unless="test || polish.blackberry">
				<parameter name="ignorewarnings" value="" />
			</obfuscator>
			
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" showLogOnError="true" verbose="true" level="info">
			</debug>
			<debug unless="test" showLogOnError="true" verbose="true" level="info">
				<!-- <handler name="file" /> -->
				<!-- <handler name="bluetooth" /> -->
				<!-- <handler name="btspp"/> -->
			</debug>
			
			<!-- user defined JAD attributes -->
			<jad>
			</jad>	
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="test and not debug"
			>
		</emulator>
	
		<emulator
			wait="false"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="debug">
			<debugger port="8000" />
		</emulator>
		
	</j2mepolish>
</target>

<target name="emulator" depends="test,j2mepolish" />

<!-- The target compiling the server -->
<target name="compileserver" depends="init">
	<mkdir dir="${builddir}" />
	<javac srcdir="source/server" destdir="${builddir}" debug="true">
		<classpath>
			<pathelement path="${classpath}" />
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
	</javac>
	<copy todir="${builddir}">
		<fileset dir="source/server">
			<include name="org/**/*"/>
		</fileset>
	</copy>
</target>

<!-- The target building the server war -->
<target name="buildserver" depends="compileserver" description="builds the server">
	<mkdir dir="${distdir}"/>
	<jar destfile="${distdir}/xmlrpcsampleserver.jar" basedir="${builddir}">
		<include name="**/*.class"/>
		<include name="**/*.properties"/>
	</jar>
	<war destfile="${distdir}/${warfilename}" webxml="conf/web.xml">
		<lib dir="lib" includes="*.jar" />
		<lib dir="${distdir}" includes="xmlrpcsampleserver.jar" />
		<classes dir="conf" >
			<include name="log4j.properties" />
		</classes>
	</war>
</target>	

<!-- The target deploying the server -->
<target name="deploy" depends="buildserver">
	<copy file="${distdir}/${warfilename}" todir="${deploy.dir}" />
</target>	
	
<target name="clean" 
  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
	<delete dir="build" />
	<delete dir="dist" />
</target>

</project>
